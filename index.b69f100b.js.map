{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["/*========= LocalStorage ========= */\nlet characters = JSON.parse(localStorage.getItem('characters')) || []\n\n/*========= DOM elements ========= */\nconst searchbar = document.querySelector('.searchbar')\nconst autocomplete_container = document.querySelector('.autocomplete-results')\nconst characters_container = document.querySelector('.characters')\nconst load_more_btn = document.querySelector('.load-more-btn')\n\n/*========= Variables ========= */\nlet oldArray;\nlet pageNumber  = 0;\nlet isLoadingMoreResults = false;\n\n/*========= Functions ========= */\nconst getCharacters =  async () => {\n    pageNumber++\n\n    const url  = `https://rickandmortyapi.com/api/character?page=${pageNumber}`\n    const response = await fetch(url)\n    console.log(response)\n    const data = await response.json()\n    const all_characters = data.results\n\n    if(characters.length == 0 || isLoadingMoreResults) {\n        for(let i = 0; i < all_characters.length; i++) {\n            characters.push(all_characters[i])\n        }\n    \n        localStorage.setItem('characters', JSON.stringify(characters))\n        renderCharacterCard(characters)\n    }\n}\n\nconst filterCharacters = () => {\n    const filtered_results = characters.filter(character => character.name.toLowerCase().includes(searchbar.value.toLowerCase()))\n    renderCharacterCard(filtered_results)\n}\n\nconst renderCharacterCard  = characters => {\n    characters_container.innerHTML = ''\n\n    for(const character of characters) {\n        const character_card =  document.createElement('div')\n        character_card.className =  'character-card'\n\n        // Image\n        const character_image  = document.createElement('img')\n        character_image.className  = 'character-image'\n        character_image.src = character.image\n\n        const character_details = document.createElement('div')\n        character_details.className =  'character-details'\n        \n        // Name\n        const character_name =  document.createElement('span')\n        character_name.className = 'character-name'\n        character_name.textContent = character.name\n\n        // Species\n        const character_species =  document.createElement('span')\n        character_species.className = 'character-species'\n        character_species.textContent = character.species\n\n        // Last known location\n        const character_location_wrapper = document.createElement('div')\n        character_location_wrapper.className = 'character-location-wrapper'\n\n        const character_location_label = document.createElement('span')\n        character_location_label.className =  'character-location-label'\n        character_location_label.textContent = 'Last known location : '\n\n        const character_location =  document.createElement('span')\n        character_location.textContent = character.location.name\n\n        // Episode in which the character was first seen\n        const character_episode_wrapper = document.createElement('div')\n        character_episode_wrapper.className = 'character-episode-wrapper'\n\n        const character_episode_label = document.createElement('span')\n        character_episode_label.className =  'character-episode-label'\n        character_episode_label.textContent = 'First seen in : '\n\n        const character_episode =  document.createElement('span')\n\n        const getEpisode = async () => {\n            const url = character.episode[0]\n            const response = await fetch(url)\n            const data = await response.json()\n            const episode = [data.name, data.episode]\n            character_episode.textContent = `${episode[0]}  (${episode [1]})`\n\n            return episode\n        }\n\n        getEpisode()\n\n        character_episode_wrapper.appendChild(character_episode_label)\n        character_episode_wrapper.appendChild(character_episode)\n\n        character_location_wrapper.appendChild(character_location_label)\n        character_location_wrapper.appendChild(character_location)\n\n        character_details.appendChild(character_name)\n        character_details.appendChild(character_species)\n        character_details.appendChild(character_location_wrapper)\n        character_details.appendChild(character_episode_wrapper)\n\n        character_card.appendChild(character_image)\n        character_card.appendChild(character_details)\n        characters_container.appendChild(character_card)\n    }\n}\n\nconst searchAutoComplete = () => {\n    const search_value = searchbar.value\n    const suggestions = characters.filter(character => character.name.toLowerCase().includes(search_value.toLowerCase()))\n\n    for(const suggestion of suggestions) {\n        const autocomplete_result = document.createElement('li')\n\n        autocomplete_result.textContent = suggestion.name\n        autocomplete_result.className = 'autocomplete-result'\n        autocomplete_result.addEventListener('click', e => {\n            searchbar.value = e.target.textContent\n            filterCharacters()\n            autocomplete_container.classList.remove('show-autocomplete')\n\n        })\n\n        autocomplete_container.appendChild(autocomplete_result)\n    }\n\n    autocomplete_container.classList.add('show-autocomplete')\n}\n\n/*========= Event Listeners ========= */\n\nsearchbar.addEventListener('input', () => {\n    filterCharacters()\n    searchAutoComplete()\n})\n\nload_more_btn.addEventListener('click', () => {\n    isLoadingMoreResults = true\n    getCharacters()\n})\n\n// Click outside input search closing the aucomplete results\ndocument.addEventListener('click', e => {\n    let isClickInsideSearchbar = searchbar.contains(e.target)\n\n    if(!isClickInsideSearchbar) {\n        autocomplete_container.classList.remove('show-autocomplete')\n    }\n})\n\n/*========= Functions Calls ========= */\nsearchbar.value = ''\ngetCharacters()\nrenderCharacterCard(characters)"],"names":["$85a5f86b715fe7db$var$characters","JSON","parse","localStorage","getItem","$85a5f86b715fe7db$var$searchbar","document","querySelector","$85a5f86b715fe7db$var$autocomplete_container","$85a5f86b715fe7db$var$characters_container","$85a5f86b715fe7db$var$load_more_btn","$85a5f86b715fe7db$var$pageNumber","$85a5f86b715fe7db$var$isLoadingMoreResults","$85a5f86b715fe7db$var$getCharacters","async","url","response","fetch","console","log","all_characters","json","results","length","i","push","setItem","stringify","$85a5f86b715fe7db$var$renderCharacterCard","$85a5f86b715fe7db$var$filterCharacters","filtered_results","filter","character","name","toLowerCase","includes","value","characters","innerHTML","character_card","createElement","className","character_image","src","image","character_details","character_name","textContent","character_species","species","character_location_wrapper","character_location_label","character_location","location","character_episode_wrapper","character_episode_label","character_episode","episode","data","getEpisode","appendChild","addEventListener","search_value","suggestions","suggestion","autocomplete_result","e","target","classList","remove","add","$85a5f86b715fe7db$var$searchAutoComplete","contains"],"version":3,"file":"index.b69f100b.js.map"}